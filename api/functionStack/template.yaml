AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "TTApp lambda functions template"

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 900
    MemorySize: 1024
    Layers:
      - !Ref TTAppLayer
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        INDEX_NAME: !Ref TTAppTableIndex
        WEBSOCKET_URL: !Ref WebSocketUrl
        WEBSOCKET_POST_URL: !Ref WebSocketPostUrl

Parameters:
  StageName:
    Type: String
  TTAppLayer:
    Type: String
  TableName:
    Type: String
  TTAppTableArn:
    Type: String
  UserPoolArn:
    Type: String
  StackNamePrefix:
    Type: String
  TTAppTableIndex:
    Type: String
  WebSocketUrl:
    Type: String
  WebSocketPostUrl:
    Type: String
  TTAppDynamoStreamARN:
    Type: String

Resources:
  TTAppApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "ttapp-api-${StageName}"
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          TTAppCognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
        DefaultAuthorizer: TTAppCognitoAuthorizer
  
  # --------------Test Function -----------#
  TestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackNamePrefix}test-lamdba
      Handler: index.main
      CodeUri: testTemplate
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /test
            Method: GET
            RestApiId: !Ref TTAppApiGateway

  # ---------- user Function ---------#
  UserApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StackNamePrefix}-UserApiFunctionRolePolicy-${StageName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref TTAppTableArn
                  - !Sub ${TTAppTableArn}/index/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  UserApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackNamePrefix}-userApiFunction-${StageName}"
      Handler: index.main
      CodeUri: users
      Role: !GetAtt UserApiFunctionRole.Arn
      Events:
        UserApi:
          Type: Api
          Properties:
            Path: /user/{action}/{id}
            Method: GET
            RestApiId: !Ref TTAppApiGateway
        UserApiPOST:
          Type: Api
          Properties:
            Path: /user/{action}
            Method: POST
            RestApiId: !Ref TTAppApiGateway
  
  UserApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${UserApiFunction}
      RetentionInDays: 90


  # ---------- team Function ---------#
  TeamApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StackNamePrefix}-TeamApiFunctionRolePolicy-${StageName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Ref TTAppTableArn
                  - !Sub ${TTAppTableArn}/index/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  TeamApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackNamePrefix}-TeamApiFunction-${StageName}"
      Handler: index.main
      CodeUri: team
      Role: !GetAtt TeamApiFunctionRole.Arn
      Events:
        UserApi:
          Type: Api
          Properties:
            Path: /team/{action}/{id}
            Method: GET
            RestApiId: !Ref TTAppApiGateway
        UserApiPOST:
          Type: Api
          Properties:
            Path: /team/{action}
            Method: POST
            RestApiId: !Ref TTAppApiGateway
  
  TeamApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${TeamApiFunction}
      RetentionInDays: 90

  # ---------- Match Function ---------#
  MatchApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StackNamePrefix}-MatchApiFunctionRolePolicy-${StageName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Ref TTAppTableArn
                  - !Sub ${TTAppTableArn}/index/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  MatchApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackNamePrefix}-MatchApiFunction-${StageName}"
      Handler: index.main
      CodeUri: match
      Role: !GetAtt MatchApiFunctionRole.Arn
      Events:
        UserApi:
          Type: Api
          Properties:
            Path: /match/{action}/{id}
            Method: GET
            RestApiId: !Ref TTAppApiGateway
        UserApiPOST:
          Type: Api
          Properties:
            Path: /match/{action}
            Method: POST
            RestApiId: !Ref TTAppApiGateway
  
  MatchApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${MatchApiFunction}
      RetentionInDays: 90
  
  # ---------- For Streaming Function ------------- #
  SocketStreamingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StackNamePrefix}-SocketStreamingFunctionRolePolicy-${StageName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Ref TTAppTableArn
                  - !Sub ${TTAppTableArn}/index/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: "Allow"
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !Ref TTAppDynamoStreamARN
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource:
                  - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/POST/@connections/*

  SocketStreamingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackNamePrefix}-SocketStreamingFunction-${StageName}"
      Handler: index.main
      CodeUri: socket
      Role: !GetAtt SocketStreamingFunctionRole.Arn
      Events:
        DBStreamLive:
          Type: DynamoDB
          Properties:
            Stream: !Ref TTAppDynamoStreamARN
            StartingPosition: LATEST
            BatchSize: 1
  
  SocketStreamingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${SocketStreamingFunction}
      RetentionInDays: 90


Outputs:
  TTAppApiURL:
    Value: !Sub https://${TTAppApiGateway}.execute-api.${AWS::Region}.amazonaws.com/local/api