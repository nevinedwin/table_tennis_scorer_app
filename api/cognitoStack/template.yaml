AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "KhelApp Cognito Template"

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 900
    MemorySize: 512
    Layers:
      - !Ref KhelAppLayer
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName

Parameters:
  StageName:
    Type: String
  KhelAppTableArn:
    Type: String
  URLs:
    Type: String
  GoogleClientId:
    Type: String
  GoogleSecretKey:
    Type: String
  KhelAppLayer:
    Type: String
  TableName:
    Type: String
  StackNamePrefix:
    Type: String

Resources:
  # userPool
  KhelAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${StackNamePrefix}-user-pool-${StageName}"
      UsernameAttributes:
        - "email"
      LambdaConfig:
        PreAuthentication: !GetAtt KhelAppPreAuthenticationFuncton.Arn
        PreSignUp: !GetAtt KhelAppPreSignUpFuncton.Arn
        PostConfirmation: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackNamePrefix}PostConfirmationFunction${StageName}
      Schema:
        - Name: role
          AttributeDataType: String
          Mutable: True
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # userPoolClient
  KhelAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: KhelAppUserPoolIdentityProvider
    Properties:
      ClientName: !Sub "khelApp-user-pool-client-${StageName}"
      UserPoolId: !Ref KhelAppUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - "email"
        - "openid"
        - "profile"
      CallbackURLs:
        - !Ref URLs
      LogoutURLs:
        - !Ref URLs
      RefreshTokenValidity: 13
      TokenValidityUnits:
        RefreshToken: hours
      SupportedIdentityProviders:
        - "Google"

  # IdentityProvider
  KhelAppUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        email: "email"
        name: "name"
      UserPoolId: !Ref KhelAppUserPool
      ProviderName: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleSecretKey
        authorize_scopes: profile email openid
      ProviderType: Google

  # UserPool Domain
  KhelAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "khel-test-website-${StageName}"
      UserPoolId: !Ref KhelAppUserPool

  # pre authentiation role
  KhelAppPreAuthenticationFunctonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackNamePrefix}-KhelAppPreAuthenticationFunctonRole-${StageName}
      Policies:
        - PolicyName: !Sub KhelAppPreAuthenticationFunctonRolePolciy-${StageName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:describeLogStreams
                  - route53:ChangeResourceRecordSets
                  - amplify:ListDomainAssociations
                  - amplify:UpdateDomainAssociations
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  # Pre authentication function
  KhelAppPreAuthenticationFuncton:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: login
      FunctionName: !Sub "${StackNamePrefix}-authentication-function-${StageName}"
      Role: !GetAtt KhelAppPreAuthenticationFunctonRole.Arn

  # Pre authentication Lambda permission
  KhelAppPreAuthenticationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt KhelAppPreAuthenticationFuncton.Arn
      Principal: cognito-idp.amazonaws.com

  # pre signup function role
  KhelAppPreSignUpFunctonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackNamePrefix}-KhelAppPreSignUpFunctonRole-${StageName}
      Policies:
        - PolicyName: !Sub KhelAppPreSignUpFunctonRolePolciy-${StageName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:describeLogStreams
                  - route53:ChangeResourceRecordSets
                  - amplify:ListDomainAssociations
                  - amplify:UpdateDomainAssociations
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  # Pre signUp function
  KhelAppPreSignUpFuncton:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: signup
      FunctionName: !Sub "${StackNamePrefix}-preSignUp-function-${StageName}"
      Role: !GetAtt KhelAppPreSignUpFunctonRole.Arn

  # Pre signUp Lambda permission
  KhelAppPreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt KhelAppPreSignUpFuncton.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt KhelAppUserPool.Arn

  # post confirmation lambda role
  KhelAppPostConfirmationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackNamePrefix}-KhelAppPostConfirmationLambdaRole-${StageName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub KhelAppPostConfirmationLambdaRolePolciy-${StageName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:describeLogStreams
                  - route53:ChangeResourceRecordSets
                  - amplify:ListDomainAssociations
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !Ref KhelAppTableArn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !GetAtt KhelAppUserPool.Arn

  # Post Confirmation Lambda Function
  KhelAppPostConfirmationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.main
      CodeUri: postConfirmation
      FunctionName: !Sub ${StackNamePrefix}PostConfirmationFunction${StageName}
      Role: !GetAtt KhelAppPostConfirmationLambdaRole.Arn

  # Post confirmation lamdba permission
  KhelAppPostConfirmationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt KhelAppPostConfirmationLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt KhelAppUserPool.Arn

Outputs:
  UserPoolId:
    Description: Userpool id
    Value: !Ref KhelAppUserPool

  UserPoolClientId:
    Description: User Pool Client ID
    Value: !Ref KhelAppUserPoolClient

  UserPoolArn:
    Description: "Userpool Arn"
    Value: !GetAtt KhelAppUserPool.Arn
